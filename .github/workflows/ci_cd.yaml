name: Build, Test, and Deploy

on:
  push:
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: echo "Simulating Install Dependencies... Install Dependencies completed successfully!"

      - name: Unit Tests
        run: echo "Simulating unit tests... Test execution completed successfully!"

      - name: Log in to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        env:
          DOCKER_IMAGE_NAME: "staff-service"
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:test .

      - name: Push Docker Image
        env:
          DOCKER_IMAGE_NAME: "staff-service"
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:test

  Test:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Integration Tests
        run: echo "Simulating integration tests... Test execution completed successfully!"

  Release:
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Promote Docker Image to Latest
        env:
          DOCKER_IMAGE_NAME: "staff-service"
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:test
          docker tag ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:test ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:latest

  Deploy:
    runs-on: ubuntu-latest
    needs: Release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to AKS
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          DOCKER_IMAGE_NAME: "staff-service"
          DEPLOYMENT_NAME: "staff-service"
          CONTAINER_NAME: "staff-service"
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 -d > minimal_kube_config.yaml
          export KUBECONFIG=minimal_kube_config.yaml
          kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:latest
          kubectl rollout restart deployment/$DEPLOYMENT_NAME
          kubectl rollout status deployment/$DEPLOYMENT_NAME

      - name: Verify Deployment
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          DEPLOYMENT_NAME: "staff-service"
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 -d > minimal_kube_config.yaml
          export KUBECONFIG=minimal_kube_config.yaml
          kubectl get pods -o wide
